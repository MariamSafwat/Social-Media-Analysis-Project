class Priority_Queue
{
private:
	void min_heapify(int Arr[], int i, int N)
	{
		int left = 2 * i;
		int right = 2 * i + 1;
		int smallest;
		if (left <= N and Arr[left] < Arr[i])
			smallest = left;
		else
			smallest = i;
		if (right <= N and Arr[right] < Arr[smallest])
			smallest = right;
		if (smallest != i)
		{
			swap(Arr[i], Arr[smallest]);
			min_heapify(Arr, smallest, N);
		}
	}
	void build_minheap(int Arr[], int N)
	{

		for (int i = N / 2; i >= 1; i--)
			min_heapify(Arr, i, N);
	}

public:
	Priority_Queue() { vector<pair<int, pair<int, int>>> queue; }
};

int shortest(vector<vector<pair<int, int>>> adjlist, int src)
{
	priority_queue<pair<int, pair<int, int>>,
		vector<pair<int, pair<int, int>>>,
		greater<pair<int, pair<int, int>>>> nodes_q;
	int n = adjlist.size();
	vector<int> d(n, -1);
	vector<int> pi(n, -1);
	int summation = 0;
	nodes_q.push({ 0,{src,src} });
	while (!nodes_q.empty()) {
		pair<int, pair<int, int> > p = nodes_q.top();
		nodes_q.pop();
		int cur_node = p.second.first;
		int cur_prev_node = p.second.second;
		int cur_dis = p.first;
		if (d[cur_node] != -1)
			continue;
		d[cur_node] = cur_dis;
		summation += cur_dis;
		pi[cur_node] = cur_prev_node;


		for (int i = 0; i < adjlist[cur_node].size(); i++)
		{
			int next_node = adjlist[cur_node][i].first;
			int weight = adjlist[cur_node][i].second;
			if (d[next_node] != -1)
				continue;
			nodes_q.push({ cur_dis + weight,
				{ next_node, cur_node } });
		}
	}
	return summation;
	/*4 5
	0 1 1
	1 3 1
	0 3 5
	0 2 10
	2 3 4*/
}
void closeness(vector<vector<pair<int, int>>> adjlist, vector<float>& closs)
{

	int n = adjlist.size();
	for (int i = 0; i < n; i++)
	{
		//quickSort(adjlist[i], 0, adjlist[i].size() - 1);
		//sort(adjlist[i].begin(), adjlist[i].end());
		int sum = 0;
		sum = shortest(adjlist, i);

		if (sum != 0)
			closs.push_back((float)(n - 1) / (float)sum);
	}
}

void quickSort(vector<pair<int, int>> arr, int l, int r) {
	if (l >= r) return;
	int pivot = arr[l].first;
	int i = l + 1;
	int j = r;
	while (i <= j) {
		while (arr[i].first <= pivot) i++;
		while (arr[j].first > pivot) j--;
		if (i < j)
			swap(arr[i], arr[j]);
	}
	swap(arr[l], arr[j]);
	quickSort(arr, l, j - 1);
	quickSort(arr, i, r);
}
void swap(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}